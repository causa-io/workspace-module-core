import { CliCommand, type ParentCliCommandDefinition } from '@causa/cli';
import { WorkspaceFunction } from '@causa/workspace';
import { IsObject, IsString } from 'class-validator';
import type { InputData } from 'quicktype-core';

/**
 * The `model` parent command, grouping all commands related to business modelling, e.g. generating code from schemas.
 */
export const modelCommandDefinition: ParentCliCommandDefinition = {
  name: 'model',
  description: 'Manages business modelling, and code generation from it.',
};

/**
 * Describes a schema that has been generated by a code generator.
 */
export type GeneratedSchema = {
  /**
   * The name of the generated class, function, or type.
   */
  name: string;

  /**
   * The path to the file where the generated code is located.
   */
  file: string;
};

/**
 * A collection of generated schemas, where keys are URIs to the input schema files (possibly including a fragment
 * identifier).
 */
export type GeneratedSchemas = Record<string, GeneratedSchema>;

/**
 * The output of {@link ModelGenerateCode}, which contains the {@link GeneratedSchemas} for each code generator.
 * Keys are code generator names.
 */
export type GeneratorsOutput = Record<string, GeneratedSchemas>;

/**
 * Runs all the configured model code generators.
 * Returns the list of files generated by the code generators.
 */
@CliCommand({
  parent: modelCommandDefinition,
  name: 'generateCode',
  description: `Runs all the configured model code generators.`,
  summary: `Runs all the configured model code generators.`,
  aliases: ['genCode'],
  outputFn: (output) => {
    const files = Object.values(output)
      .flatMap((schemas) => Object.values(schemas))
      .map(({ file }) => file);
    console.log([...new Set(files)].join('\n'));
  },
})
export abstract class ModelGenerateCode extends WorkspaceFunction<
  Promise<GeneratorsOutput>
> {}

/**
 * Runs the given model code generator, and returns the list of files generated by it.
 * This should be implemented by each code generator for its corresponding {@link ModelRunCodeGenerator.generator} name.
 */
export abstract class ModelRunCodeGenerator extends WorkspaceFunction<
  Promise<GeneratedSchemas>
> {
  /**
   * The name of the code generator to run.
   */
  @IsString()
  readonly generator!: string;

  /**
   * The configuration for the code generator.
   */
  @IsObject()
  readonly configuration!: Record<string, unknown>;

  /**
   * The output of all previous generators that have run.
   */
  @IsObject()
  readonly previousGeneratorsOutput!: GeneratorsOutput;
}

/**
 * Inputs for a code generator, parsed from its configuration.
 */
export type CodeGeneratorInputs = {
  /**
   * Whether to include schema files for events referenced in the project.
   * This is only provided for information. If this is `true`, {@link CodeGeneratorInputs.files} will contain the schema
   * files for the events.
   */
  includeEvents: boolean;

  /**
   * The globs to use to find schema files.
   * This is only provided for information. If this is set, {@link CodeGeneratorInputs.files} will contain the schema
   * files matching the globs.
   */
  globs: string[];

  /**
   * The files to use as input for the code generator.
   */
  files: string[];

  /**
   * A list of properties that may exist in JSONSchema files and contain nested schemas.
   * This should be passed to the code generator configuration.
   */
  nestedSchemas?: string[];

  /**
   * If `true`, JSONSchema files that are referenced by other schemas should be included in the input data, along with
   * their nested schemas.
   * This should be passed to the code generator configuration.
   */
  includeFullReferences?: boolean;
};

/**
 * Parses the inputs for a code generator, based on its configuration.
 * This expects standard properties in the configuration (all are optional):
 * - `includeEvents`: boolean.
 * - `globs`: string[].
 * - `nestedSchemas`: string[].
 * - `includeReferences`: boolean.
 */
export abstract class ModelParseCodeGeneratorInputs extends WorkspaceFunction<
  Promise<CodeGeneratorInputs>
> {
  /**
   * The configuration for the code generator.
   */
  @IsObject()
  readonly configuration!: Record<string, unknown>;
}

/**
 * Creates `quicktype`'s {@link InputData} for model code generators, based on their configuration.
 * This uses the {@link ModelParseCodeGeneratorInputs} to get the list of files and options, but the quicktype's input
 * data will depend on the model's schema format.
 */
export abstract class ModelMakeGeneratorQuicktypeInputData extends WorkspaceFunction<
  Promise<InputData>
> {
  /**
   * The configuration for the code generator.
   */
  @IsObject()
  readonly configuration!: Record<string, unknown>;
}
