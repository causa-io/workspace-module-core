import { CliCommand, type ParentCliCommandDefinition } from '@causa/cli';
import { WorkspaceFunction } from '@causa/workspace';
import { IsObject, IsString } from 'class-validator';

/**
 * The `model` parent command, grouping all commands related to business modelling, e.g. generating code from schemas.
 */
export const modelCommandDefinition: ParentCliCommandDefinition = {
  name: 'model',
  description: 'Manages business modelling, and code generation from it.',
};

/**
 * Runs all the configured model code generators.
 * Returns the list of files generated by the code generators.
 */
@CliCommand({
  parent: modelCommandDefinition,
  name: 'generateCode',
  description: `Runs all the configured model code generators.`,
  summary: `Runs all the configured model code generators.`,
  aliases: ['genCode'],
  outputFn: (files) => console.log(files.join('\n')),
})
export abstract class ModelGenerateCode extends WorkspaceFunction<
  Promise<string[]>
> {}

/**
 * Runs the given model code generator, and returns the list of files generated by it.
 * This should be implemented by each code generator for its corresponding {@link ModelRunCodeGenerator.generator} name.
 */
export abstract class ModelRunCodeGenerator extends WorkspaceFunction<
  Promise<string[]>
> {
  /**
   * The name of the code generator to run.
   */
  @IsString()
  readonly generator!: string;

  /**
   * The configuration for the code generator.
   */
  @IsObject()
  readonly configuration!: Record<string, unknown>;
}
